//
//  HackersApp.swift
//  Hackers
//
//  Created by Weiran Zhang on Migration to SwiftUI.
//  Copyright Â© 2024 Glass Umbrella. All rights reserved.
//

import SwiftUI
import SwinjectStoryboard
import Nuke
import UIKit

@main
struct HackersApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    init() {
        setupApp()
    }
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(SettingsStore())
                .onOpenURL { url in
                    handleIncomingURL(url)
                }
        }
    }
    
    private func setupApp() {
        // Setup Nuke
        DataLoader.sharedUrlCache.diskCapacity = 1024 * 1024 * 100 // 100MB
        
        // Init default settings
        UserDefaults.standard.registerDefaults()
        
        // Setup review prompt
        ReviewController.incrementLaunchCounter()
        ReviewController.requestReview()
    }
    
    private func handleIncomingURL(_ url: URL) {
        let bundleIdentifier = String(Bundle.main.bundleIdentifier!)
        if let scheme = url.scheme,
            scheme.localizedCaseInsensitiveCompare(bundleIdentifier) == .orderedSame,
            let view = url.host {
            let parameters = parseParameters(from: url)

            switch view {
            case "item":
                if let idString = parameters["id"],
                    let id = Int(idString) {
                    // TODO: Navigate to post using NavigationStore
                    print("Navigate to post ID: \(id)")
                }
            default: break
            }
        }
    }
    
    private func parseParameters(from url: URL) -> [String: String] {
        var parameters: [String: String] = [:]
        URLComponents(url: url, resolvingAgainstBaseURL: false)?.queryItems?.forEach {
            parameters[$0.name] = $0.value
        }
        return parameters
    }
}

// Keep AppDelegate for legacy services but remove @UIApplicationMain
class AppDelegate: NSObject, UIApplicationDelegate {
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]?) -> Bool {
        // Process args for testing
        if ProcessInfo.processInfo.arguments.contains("disableReviewPrompts") {
            ReviewController.disablePrompts = true
        }
        if ProcessInfo.processInfo.arguments.contains("skipAnimations") {
            UIView.setAnimationsEnabled(false)
        }
        
        return true
    }
}